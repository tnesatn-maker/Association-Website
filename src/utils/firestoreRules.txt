// Suggested Firestore Rules (paste into Firestore rules editor and adjust):
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() { return request.auth != null; }
    function isOwner(uid) { return request.auth != null && request.auth.uid == uid; }
    function isAdmin() { return request.auth.token.admin == true; } // set via custom claims

    match /members/{uid} {
      allow read: if resource.data.public == true || isOwner(uid) || isAdmin();
      allow create: if signedIn() && isOwner(uid);
      allow update: if isOwner(uid) || isAdmin();
      allow delete: if isAdmin();

      match /ratings/{ratingId} {
        allow read: if true;
        allow create: if signedIn() && request.resource.data.by == request.auth.uid;
        allow update, delete: if isAdmin() || (signedIn() && resource.data.by == request.auth.uid);
      }
    }
  }
}

// Suggested Storage Rules:
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /certificates/{uid}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == uid;
    }
  }
}
